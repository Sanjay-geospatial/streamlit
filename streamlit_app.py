import streamlit as st
import tensorflow as tf
import os
import numpy as np
from PIL import Image
import requests
import gdown
import rioxarray as rxr
from io import BytesIO


MODEL_URL = "https://huggingface.co/SanjayGeospatial/cloud-removal-model/resolve/main/g_model_epoch1.h5"
MODEL_PATH = "g_model_epoch1.h5"

@st.cache_resource
def load_model():
    model_path = hf_hub_download(
        repo_id="SanjayGeospatial/cloud-removal-model",
        filename="g_model_epoch1.h5"
    )
    return tf.keras.models.load_model(model_path)


model = load_model()

# Utility: preprocess input image
def preprocess_image(img):
    img = normalized_cloud_free = 2 * img - (img).min() / img.max() - img.min() - 1
    img = np.expand_dims(img, axis = 0)
    return img

# Utility: postprocess output image
def postprocess_image(pred):
    pred = ((pred + 1) / 2)**0.4
    return pred

# Streamlit UI
st.title("‚òÅÔ∏è‚Üíüå§Ô∏è Cloud Removal App")
st.write("Upload a cloudy satellite image to see a cloud-free version generated by the model.")

uploaded_file = st.file_uploader("Upload Cloudy Image", type=["jpg", "jpeg", "png", "tif", "tiff"])

if uploaded_file:
    input_image = rxr.open_rasterio(uploaded_file)
    input_image = input_image.transpose('y', 'x', 'band').data
    input_image = Image.from_array(input_image)
    st.image(input_image, caption="Input: Cloudy Image", use_column_width=True)

    with st.spinner("Generating cloud-free image..."):
        input_tensor = preprocess_image(input_image)
        output_tensor = model.predict(input_tensor)
        output_image = postprocess_image(output_tensor)

    st.image(output_image, caption="Output: Cloud-Free Image", use_column_width=True)




